// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SomePluginClient is the client API for SomePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomePluginClient interface {
	PluginEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type somePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewSomePluginClient(cc grpc.ClientConnInterface) SomePluginClient {
	return &somePluginClient{cc}
}

func (c *somePluginClient) PluginEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/test.SomePlugin/PluginEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomePluginServer is the server API for SomePlugin service.
// All implementations must embed UnimplementedSomePluginServer
// for forward compatibility
type SomePluginServer interface {
	PluginEcho(context.Context, *EchoRequest) (*EchoResponse, error)
	mustEmbedUnimplementedSomePluginServer()
}

// UnimplementedSomePluginServer must be embedded to have forward compatible implementations.
type UnimplementedSomePluginServer struct {
}

func (UnimplementedSomePluginServer) PluginEcho(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginEcho not implemented")
}
func (UnimplementedSomePluginServer) mustEmbedUnimplementedSomePluginServer() {}

// UnsafeSomePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomePluginServer will
// result in compilation errors.
type UnsafeSomePluginServer interface {
	mustEmbedUnimplementedSomePluginServer()
}

func RegisterSomePluginServer(s grpc.ServiceRegistrar, srv SomePluginServer) {
	s.RegisterService(&SomePlugin_ServiceDesc, srv)
}

func _SomePlugin_PluginEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomePluginServer).PluginEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.SomePlugin/PluginEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomePluginServer).PluginEcho(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SomePlugin_ServiceDesc is the grpc.ServiceDesc for SomePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.SomePlugin",
	HandlerType: (*SomePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginEcho",
			Handler:    _SomePlugin_PluginEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/someplugin.proto",
}
