// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: spire/plugin/types/x509certificate.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type X509Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ASN.1 DER encoded bytes of the X.509 certificate.
	Asn1 []byte `protobuf:"bytes,1,opt,name=asn1,proto3" json:"asn1,omitempty"`
	// Indicates if the authority has been tainted. A tainted authority is not safe to be used anymore.
	Tainted       bool `protobuf:"varint,2,opt,name=tainted,proto3" json:"tainted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *X509Certificate) Reset() {
	*x = X509Certificate{}
	mi := &file_spire_plugin_types_x509certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *X509Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Certificate) ProtoMessage() {}

func (x *X509Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_types_x509certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Certificate.ProtoReflect.Descriptor instead.
func (*X509Certificate) Descriptor() ([]byte, []int) {
	return file_spire_plugin_types_x509certificate_proto_rawDescGZIP(), []int{0}
}

func (x *X509Certificate) GetAsn1() []byte {
	if x != nil {
		return x.Asn1
	}
	return nil
}

func (x *X509Certificate) GetTainted() bool {
	if x != nil {
		return x.Tainted
	}
	return false
}

var File_spire_plugin_types_x509certificate_proto protoreflect.FileDescriptor

const file_spire_plugin_types_x509certificate_proto_rawDesc = "" +
	"\n" +
	"(spire/plugin/types/x509certificate.proto\x12\x12spire.plugin.types\"?\n" +
	"\x0fX509Certificate\x12\x12\n" +
	"\x04asn1\x18\x01 \x01(\fR\x04asn1\x12\x18\n" +
	"\atainted\x18\x02 \x01(\bR\ataintedB=Z;github.com/spiffe/spire-plugin-sdk/proto/spire/plugin/typesb\x06proto3"

var (
	file_spire_plugin_types_x509certificate_proto_rawDescOnce sync.Once
	file_spire_plugin_types_x509certificate_proto_rawDescData []byte
)

func file_spire_plugin_types_x509certificate_proto_rawDescGZIP() []byte {
	file_spire_plugin_types_x509certificate_proto_rawDescOnce.Do(func() {
		file_spire_plugin_types_x509certificate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_plugin_types_x509certificate_proto_rawDesc), len(file_spire_plugin_types_x509certificate_proto_rawDesc)))
	})
	return file_spire_plugin_types_x509certificate_proto_rawDescData
}

var file_spire_plugin_types_x509certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_spire_plugin_types_x509certificate_proto_goTypes = []any{
	(*X509Certificate)(nil), // 0: spire.plugin.types.X509Certificate
}
var file_spire_plugin_types_x509certificate_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_spire_plugin_types_x509certificate_proto_init() }
func file_spire_plugin_types_x509certificate_proto_init() {
	if File_spire_plugin_types_x509certificate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_plugin_types_x509certificate_proto_rawDesc), len(file_spire_plugin_types_x509certificate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spire_plugin_types_x509certificate_proto_goTypes,
		DependencyIndexes: file_spire_plugin_types_x509certificate_proto_depIdxs,
		MessageInfos:      file_spire_plugin_types_x509certificate_proto_msgTypes,
	}.Build()
	File_spire_plugin_types_x509certificate_proto = out.File
	file_spire_plugin_types_x509certificate_proto_goTypes = nil
	file_spire_plugin_types_x509certificate_proto_depIdxs = nil
}
