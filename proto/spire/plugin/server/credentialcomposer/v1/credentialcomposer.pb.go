// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: spire/plugin/server/credentialcomposer/v1/credentialcomposer.proto

package credentialcomposerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComposeServerX509CARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the server X509 CA. To maintain forward compatibility
	// with future attribute field additions, these attributes SHOULD be
	// mutated and used to populate the attributes field in the
	// ComposeServerX509CAResponse.
	Attributes *X509CAAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeServerX509CARequest) Reset() {
	*x = ComposeServerX509CARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerX509CARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerX509CARequest) ProtoMessage() {}

func (x *ComposeServerX509CARequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerX509CARequest.ProtoReflect.Descriptor instead.
func (*ComposeServerX509CARequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{0}
}

func (x *ComposeServerX509CARequest) GetAttributes() *X509CAAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ComposeServerX509CAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the server X509 CA. To maintain forward compatibility
	// with future attribute field additions, these attributes SHOULD be
	// populated with the mutated attributes field in the
	// ComposeServerX509CARequest. If this field is not included in the
	// response, the original attributes sent in the request will be used.
	Attributes *X509CAAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeServerX509CAResponse) Reset() {
	*x = ComposeServerX509CAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerX509CAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerX509CAResponse) ProtoMessage() {}

func (x *ComposeServerX509CAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerX509CAResponse.ProtoReflect.Descriptor instead.
func (*ComposeServerX509CAResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{1}
}

func (x *ComposeServerX509CAResponse) GetAttributes() *X509CAAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ComposeServerX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the server X509-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be mutated and used to populate the attributes field in the
	// ComposeServerX509SVIDResponse.
	Attributes *X509SVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeServerX509SVIDRequest) Reset() {
	*x = ComposeServerX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerX509SVIDRequest) ProtoMessage() {}

func (x *ComposeServerX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*ComposeServerX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{2}
}

func (x *ComposeServerX509SVIDRequest) GetAttributes() *X509SVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ComposeServerX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the server X509-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be populated with the mutated attributes field in the
	// ComposeServerX509SVIDRequest. If this field is not included in the
	// response, the original attributes sent in the request will be used.
	Attributes *X509SVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeServerX509SVIDResponse) Reset() {
	*x = ComposeServerX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerX509SVIDResponse) ProtoMessage() {}

func (x *ComposeServerX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*ComposeServerX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{3}
}

func (x *ComposeServerX509SVIDResponse) GetAttributes() *X509SVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ComposeAgentX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the agent X509-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be mutated and used to populate the attributes field in the
	// ComposeAgentX509SVIDResponse.
	Attributes *X509SVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// The SPIFFE ID of the agent.
	SpiffeId string `protobuf:"bytes,2,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// PKIX encoded public key of the agent.
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ComposeAgentX509SVIDRequest) Reset() {
	*x = ComposeAgentX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeAgentX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeAgentX509SVIDRequest) ProtoMessage() {}

func (x *ComposeAgentX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeAgentX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*ComposeAgentX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{4}
}

func (x *ComposeAgentX509SVIDRequest) GetAttributes() *X509SVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ComposeAgentX509SVIDRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *ComposeAgentX509SVIDRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ComposeAgentX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the agent X509-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be populated with the mutated attributes field in the
	// ComposeAgentX509SVIDRequest. If this field is not included in the
	// response, the original attributes sent in the request will be used.
	Attributes *X509SVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeAgentX509SVIDResponse) Reset() {
	*x = ComposeAgentX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeAgentX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeAgentX509SVIDResponse) ProtoMessage() {}

func (x *ComposeAgentX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeAgentX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*ComposeAgentX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{5}
}

func (x *ComposeAgentX509SVIDResponse) GetAttributes() *X509SVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ComposeWorkloadX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the workload X509-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be mutated and used to populate the attributes field in the
	// ComposeWorkloadX509SVIDResponse.
	Attributes *X509SVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// The SPIFFE ID of the workload.
	SpiffeId string `protobuf:"bytes,2,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// PKIX encoded public key of the workload.
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ComposeWorkloadX509SVIDRequest) Reset() {
	*x = ComposeWorkloadX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeWorkloadX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeWorkloadX509SVIDRequest) ProtoMessage() {}

func (x *ComposeWorkloadX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeWorkloadX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*ComposeWorkloadX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{6}
}

func (x *ComposeWorkloadX509SVIDRequest) GetAttributes() *X509SVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ComposeWorkloadX509SVIDRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *ComposeWorkloadX509SVIDRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ComposeWorkloadX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the workload X509-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be populated with the mutated attributes field in the
	// ComposeWorkloadX509SVIDRequest. If this message is not included in the
	// response, the original attributes sent in the request will be used.
	Attributes *X509SVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeWorkloadX509SVIDResponse) Reset() {
	*x = ComposeWorkloadX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeWorkloadX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeWorkloadX509SVIDResponse) ProtoMessage() {}

func (x *ComposeWorkloadX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeWorkloadX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*ComposeWorkloadX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{7}
}

func (x *ComposeWorkloadX509SVIDResponse) GetAttributes() *X509SVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ComposeWorkloadJWTSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the workload JWT-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be mutated and used to populate the attributes field in the
	// ComposeWorkloadJWTSVIDResponse.
	Attributes *JWTSVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// The SPIFFE ID of the workload.
	SpiffeId string `protobuf:"bytes,2,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
}

func (x *ComposeWorkloadJWTSVIDRequest) Reset() {
	*x = ComposeWorkloadJWTSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeWorkloadJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeWorkloadJWTSVIDRequest) ProtoMessage() {}

func (x *ComposeWorkloadJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeWorkloadJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*ComposeWorkloadJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{8}
}

func (x *ComposeWorkloadJWTSVIDRequest) GetAttributes() *JWTSVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ComposeWorkloadJWTSVIDRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

type ComposeWorkloadJWTSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes for the workload JWT-SVID. To maintain forward
	// compatibility with future attribute field additions, these attributes
	// SHOULD be populated with the mutated attributes field in the
	// ComposeWorkloadJWTSVIDRequest. If this field is not included in the
	// response, the original attributes sent in the request will be used.
	Attributes *JWTSVIDAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ComposeWorkloadJWTSVIDResponse) Reset() {
	*x = ComposeWorkloadJWTSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeWorkloadJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeWorkloadJWTSVIDResponse) ProtoMessage() {}

func (x *ComposeWorkloadJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeWorkloadJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*ComposeWorkloadJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{9}
}

func (x *ComposeWorkloadJWTSVIDResponse) GetAttributes() *JWTSVIDAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type X509CAAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subject of the X509 CA.
	Subject *DistinguishedName `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Zero or more policy identifiers (OIDs) to apply to the CA.
	PolicyIdentifiers []string `protobuf:"bytes,2,rep,name=policy_identifiers,json=policyIdentifiers,proto3" json:"policy_identifiers,omitempty"`
	// Zero or more extensions to apply to the X509 CA. These will override
	// any extensions otherwise added by the other fields.
	ExtraExtensions []*X509Extension `protobuf:"bytes,3,rep,name=extra_extensions,json=extraExtensions,proto3" json:"extra_extensions,omitempty"`
}

func (x *X509CAAttributes) Reset() {
	*x = X509CAAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509CAAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509CAAttributes) ProtoMessage() {}

func (x *X509CAAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509CAAttributes.ProtoReflect.Descriptor instead.
func (*X509CAAttributes) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{10}
}

func (x *X509CAAttributes) GetSubject() *DistinguishedName {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *X509CAAttributes) GetPolicyIdentifiers() []string {
	if x != nil {
		return x.PolicyIdentifiers
	}
	return nil
}

func (x *X509CAAttributes) GetExtraExtensions() []*X509Extension {
	if x != nil {
		return x.ExtraExtensions
	}
	return nil
}

type X509SVIDAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subject of the X509-SVID.
	Subject *DistinguishedName `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Zero or more DNS SANs to apply to the X509-SVID.
	DnsSans []string `protobuf:"bytes,2,rep,name=dns_sans,json=dnsSans,proto3" json:"dns_sans,omitempty"`
	// Zero or more extensions to apply to the X509-SVID . These will override
	// any extensions otherwise added by the other fields. This field cannot
	// be used to change the URI SAN of the X509-SVID (i.e. the SPIFFE ID).
	ExtraExtensions []*X509Extension `protobuf:"bytes,3,rep,name=extra_extensions,json=extraExtensions,proto3" json:"extra_extensions,omitempty"`
}

func (x *X509SVIDAttributes) Reset() {
	*x = X509SVIDAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509SVIDAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVIDAttributes) ProtoMessage() {}

func (x *X509SVIDAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVIDAttributes.ProtoReflect.Descriptor instead.
func (*X509SVIDAttributes) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{11}
}

func (x *X509SVIDAttributes) GetSubject() *DistinguishedName {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *X509SVIDAttributes) GetDnsSans() []string {
	if x != nil {
		return x.DnsSans
	}
	return nil
}

func (x *X509SVIDAttributes) GetExtraExtensions() []*X509Extension {
	if x != nil {
		return x.ExtraExtensions
	}
	return nil
}

type X509Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The OID of the X.509 extension (e.g. "1.2.3.4")
	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// Opaque value of the extension. No validity checking is performed on
	// this value. Plugin implementors must ensure they are providing well
	// formed values for the given extension OID.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Whether or not the extension is critical, i.e., must be
	// handled/understood by verifiers or not.
	Critical bool `protobuf:"varint,3,opt,name=critical,proto3" json:"critical,omitempty"`
}

func (x *X509Extension) Reset() {
	*x = X509Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Extension) ProtoMessage() {}

func (x *X509Extension) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Extension.ProtoReflect.Descriptor instead.
func (*X509Extension) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{12}
}

func (x *X509Extension) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *X509Extension) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *X509Extension) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

type DistinguishedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Zero or more country designations.
	Country []string `protobuf:"bytes,1,rep,name=country,proto3" json:"country,omitempty"`
	// Zero or more organization designations.
	Organization []string `protobuf:"bytes,2,rep,name=organization,proto3" json:"organization,omitempty"`
	// Zero or more organizational unit designations.
	OrganizationalUnit []string `protobuf:"bytes,3,rep,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	// Zero or more locality designations.
	Locality []string `protobuf:"bytes,4,rep,name=locality,proto3" json:"locality,omitempty"`
	// Zero or more province designations.
	Province []string `protobuf:"bytes,5,rep,name=province,proto3" json:"province,omitempty"`
	// Zero or more street address designations.
	StreetAddress []string `protobuf:"bytes,6,rep,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	// Zero or more postal code designations.
	PostalCode []string `protobuf:"bytes,7,rep,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// The serial number designation. The attribute is only set if this field
	// is non-empty.
	SerialNumber string `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The common name designation. The attribute is only set if this field is
	// non-empty.
	CommonName string `protobuf:"bytes,9,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Extra names, determined by oid and value, to be added to the
	// distinguished names. This field is to support names not covered by the
	// DistinguishedName message. It will override values specified in other
	// fields in the DistinguishedName if the attributes overlap.
	ExtraNames []*AttributeTypeAndValue `protobuf:"bytes,10,rep,name=extra_names,json=extraNames,proto3" json:"extra_names,omitempty"`
}

func (x *DistinguishedName) Reset() {
	*x = DistinguishedName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistinguishedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinguishedName) ProtoMessage() {}

func (x *DistinguishedName) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinguishedName.ProtoReflect.Descriptor instead.
func (*DistinguishedName) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{13}
}

func (x *DistinguishedName) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *DistinguishedName) GetOrganization() []string {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *DistinguishedName) GetOrganizationalUnit() []string {
	if x != nil {
		return x.OrganizationalUnit
	}
	return nil
}

func (x *DistinguishedName) GetLocality() []string {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *DistinguishedName) GetProvince() []string {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *DistinguishedName) GetStreetAddress() []string {
	if x != nil {
		return x.StreetAddress
	}
	return nil
}

func (x *DistinguishedName) GetPostalCode() []string {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *DistinguishedName) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DistinguishedName) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *DistinguishedName) GetExtraNames() []*AttributeTypeAndValue {
	if x != nil {
		return x.ExtraNames
	}
	return nil
}

type AttributeTypeAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The OID of the attribute (e.g. "1.2.3.4").
	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// The value of the attribute. Only UTF-8 strings are currently supported.
	// this field may be encapsulated in a oneof at a later point.
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *AttributeTypeAndValue) Reset() {
	*x = AttributeTypeAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeTypeAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeTypeAndValue) ProtoMessage() {}

func (x *AttributeTypeAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeTypeAndValue.ProtoReflect.Descriptor instead.
func (*AttributeTypeAndValue) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{14}
}

func (x *AttributeTypeAndValue) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *AttributeTypeAndValue) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type JWTSVIDAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JWT-SVID claims. Returned attributes must contain all of the
	// claims required by the JWT-SVID specification:
	//
	// https://github.com/spiffe/spiffe/blob/main/standards/JWT-SVID.md
	//
	// The subject claim (i.e. SPIFFE ID) cannot be overriden.
	Claims *structpb.Struct `protobuf:"bytes,1,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (x *JWTSVIDAttributes) Reset() {
	*x = JWTSVIDAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTSVIDAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTSVIDAttributes) ProtoMessage() {}

func (x *JWTSVIDAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTSVIDAttributes.ProtoReflect.Descriptor instead.
func (*JWTSVIDAttributes) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP(), []int{15}
}

func (x *JWTSVIDAttributes) GetClaims() *structpb.Struct {
	if x != nil {
		return x.Claims
	}
	return nil
}

var File_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto protoreflect.FileDescriptor

var file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDesc = []byte{
	0x0a, 0x42, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a,
	0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x58, 0x35,
	0x30, 0x39, 0x43, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39,
	0x43, 0x41, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x7d,
	0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1f,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x9a,
	0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x10,
	0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35,
	0x30, 0x39, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec, 0x01, 0x0a,
	0x12, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x6e, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x53, 0x61, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30,
	0x39, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x58,
	0x35, 0x30, 0x39, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x22, 0xab, 0x03, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4c,
	0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x11,
	0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x32, 0xf5, 0x06, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x43,
	0x41, 0x12, 0x45, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x43,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xaa, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x47, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x58, 0x35, 0x30,
	0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x46, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x58, 0x35, 0x30, 0x39, 0x53,
	0x56, 0x49, 0x44, 0x12, 0x49, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x12, 0x48, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x49, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x57, 0x54, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x69, 0x5a, 0x67, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2f,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescOnce sync.Once
	file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescData = file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDesc
)

func file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescGZIP() []byte {
	file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescOnce.Do(func() {
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescData)
	})
	return file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDescData
}

var file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_goTypes = []interface{}{
	(*ComposeServerX509CARequest)(nil),      // 0: spire.plugin.server.credentialcomposer.v1.ComposeServerX509CARequest
	(*ComposeServerX509CAResponse)(nil),     // 1: spire.plugin.server.credentialcomposer.v1.ComposeServerX509CAResponse
	(*ComposeServerX509SVIDRequest)(nil),    // 2: spire.plugin.server.credentialcomposer.v1.ComposeServerX509SVIDRequest
	(*ComposeServerX509SVIDResponse)(nil),   // 3: spire.plugin.server.credentialcomposer.v1.ComposeServerX509SVIDResponse
	(*ComposeAgentX509SVIDRequest)(nil),     // 4: spire.plugin.server.credentialcomposer.v1.ComposeAgentX509SVIDRequest
	(*ComposeAgentX509SVIDResponse)(nil),    // 5: spire.plugin.server.credentialcomposer.v1.ComposeAgentX509SVIDResponse
	(*ComposeWorkloadX509SVIDRequest)(nil),  // 6: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadX509SVIDRequest
	(*ComposeWorkloadX509SVIDResponse)(nil), // 7: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadX509SVIDResponse
	(*ComposeWorkloadJWTSVIDRequest)(nil),   // 8: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadJWTSVIDRequest
	(*ComposeWorkloadJWTSVIDResponse)(nil),  // 9: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadJWTSVIDResponse
	(*X509CAAttributes)(nil),                // 10: spire.plugin.server.credentialcomposer.v1.X509CAAttributes
	(*X509SVIDAttributes)(nil),              // 11: spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	(*X509Extension)(nil),                   // 12: spire.plugin.server.credentialcomposer.v1.X509Extension
	(*DistinguishedName)(nil),               // 13: spire.plugin.server.credentialcomposer.v1.DistinguishedName
	(*AttributeTypeAndValue)(nil),           // 14: spire.plugin.server.credentialcomposer.v1.AttributeTypeAndValue
	(*JWTSVIDAttributes)(nil),               // 15: spire.plugin.server.credentialcomposer.v1.JWTSVIDAttributes
	(*structpb.Struct)(nil),                 // 16: google.protobuf.Struct
}
var file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_depIdxs = []int32{
	10, // 0: spire.plugin.server.credentialcomposer.v1.ComposeServerX509CARequest.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509CAAttributes
	10, // 1: spire.plugin.server.credentialcomposer.v1.ComposeServerX509CAResponse.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509CAAttributes
	11, // 2: spire.plugin.server.credentialcomposer.v1.ComposeServerX509SVIDRequest.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	11, // 3: spire.plugin.server.credentialcomposer.v1.ComposeServerX509SVIDResponse.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	11, // 4: spire.plugin.server.credentialcomposer.v1.ComposeAgentX509SVIDRequest.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	11, // 5: spire.plugin.server.credentialcomposer.v1.ComposeAgentX509SVIDResponse.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	11, // 6: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadX509SVIDRequest.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	11, // 7: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadX509SVIDResponse.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes
	15, // 8: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadJWTSVIDRequest.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.JWTSVIDAttributes
	15, // 9: spire.plugin.server.credentialcomposer.v1.ComposeWorkloadJWTSVIDResponse.attributes:type_name -> spire.plugin.server.credentialcomposer.v1.JWTSVIDAttributes
	13, // 10: spire.plugin.server.credentialcomposer.v1.X509CAAttributes.subject:type_name -> spire.plugin.server.credentialcomposer.v1.DistinguishedName
	12, // 11: spire.plugin.server.credentialcomposer.v1.X509CAAttributes.extra_extensions:type_name -> spire.plugin.server.credentialcomposer.v1.X509Extension
	13, // 12: spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes.subject:type_name -> spire.plugin.server.credentialcomposer.v1.DistinguishedName
	12, // 13: spire.plugin.server.credentialcomposer.v1.X509SVIDAttributes.extra_extensions:type_name -> spire.plugin.server.credentialcomposer.v1.X509Extension
	14, // 14: spire.plugin.server.credentialcomposer.v1.DistinguishedName.extra_names:type_name -> spire.plugin.server.credentialcomposer.v1.AttributeTypeAndValue
	16, // 15: spire.plugin.server.credentialcomposer.v1.JWTSVIDAttributes.claims:type_name -> google.protobuf.Struct
	0,  // 16: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeServerX509CA:input_type -> spire.plugin.server.credentialcomposer.v1.ComposeServerX509CARequest
	2,  // 17: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeServerX509SVID:input_type -> spire.plugin.server.credentialcomposer.v1.ComposeServerX509SVIDRequest
	4,  // 18: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeAgentX509SVID:input_type -> spire.plugin.server.credentialcomposer.v1.ComposeAgentX509SVIDRequest
	6,  // 19: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeWorkloadX509SVID:input_type -> spire.plugin.server.credentialcomposer.v1.ComposeWorkloadX509SVIDRequest
	8,  // 20: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeWorkloadJWTSVID:input_type -> spire.plugin.server.credentialcomposer.v1.ComposeWorkloadJWTSVIDRequest
	1,  // 21: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeServerX509CA:output_type -> spire.plugin.server.credentialcomposer.v1.ComposeServerX509CAResponse
	3,  // 22: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeServerX509SVID:output_type -> spire.plugin.server.credentialcomposer.v1.ComposeServerX509SVIDResponse
	5,  // 23: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeAgentX509SVID:output_type -> spire.plugin.server.credentialcomposer.v1.ComposeAgentX509SVIDResponse
	7,  // 24: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeWorkloadX509SVID:output_type -> spire.plugin.server.credentialcomposer.v1.ComposeWorkloadX509SVIDResponse
	9,  // 25: spire.plugin.server.credentialcomposer.v1.CredentialComposer.ComposeWorkloadJWTSVID:output_type -> spire.plugin.server.credentialcomposer.v1.ComposeWorkloadJWTSVIDResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_init() }
func file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_init() {
	if File_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerX509CARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerX509CAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeAgentX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeAgentX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeWorkloadX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeWorkloadX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeWorkloadJWTSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeWorkloadJWTSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509CAAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509SVIDAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistinguishedName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeTypeAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTSVIDAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_goTypes,
		DependencyIndexes: file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_depIdxs,
		MessageInfos:      file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_msgTypes,
	}.Build()
	File_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto = out.File
	file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_rawDesc = nil
	file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_goTypes = nil
	file_spire_plugin_server_credentialcomposer_v1_credentialcomposer_proto_depIdxs = nil
}
