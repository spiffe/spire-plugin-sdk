// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package noderesolverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeResolverClient is the client API for NodeResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeResolverClient interface {
	// Resolve resolves additional selectors for a given agent.
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
}

type nodeResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeResolverClient(cc grpc.ClientConnInterface) NodeResolverClient {
	return &nodeResolverClient{cc}
}

func (c *nodeResolverClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/spire.plugin.server.noderesolver.v1.NodeResolver/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeResolverServer is the server API for NodeResolver service.
// All implementations must embed UnimplementedNodeResolverServer
// for forward compatibility
type NodeResolverServer interface {
	// Resolve resolves additional selectors for a given agent.
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	mustEmbedUnimplementedNodeResolverServer()
}

// UnimplementedNodeResolverServer must be embedded to have forward compatible implementations.
type UnimplementedNodeResolverServer struct {
}

func (UnimplementedNodeResolverServer) Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedNodeResolverServer) mustEmbedUnimplementedNodeResolverServer() {}

// UnsafeNodeResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeResolverServer will
// result in compilation errors.
type UnsafeNodeResolverServer interface {
	mustEmbedUnimplementedNodeResolverServer()
}

func RegisterNodeResolverServer(s grpc.ServiceRegistrar, srv NodeResolverServer) {
	s.RegisterService(&NodeResolver_ServiceDesc, srv)
}

func _NodeResolver_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeResolverServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.plugin.server.noderesolver.v1.NodeResolver/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeResolverServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeResolver_ServiceDesc is the grpc.ServiceDesc for NodeResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.plugin.server.noderesolver.v1.NodeResolver",
	HandlerType: (*NodeResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _NodeResolver_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/plugin/server/noderesolver/v1/noderesolver.proto",
}
