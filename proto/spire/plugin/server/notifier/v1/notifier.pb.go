// A Notifier plugin reacts to various server related events

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: spire/plugin/server/notifier/v1/notifier.proto

package notifierv1

import (
	types "github.com/spiffe/spire-plugin-sdk/proto/spire/plugin/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotifyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The event the plugin is being notified for.
	//
	// Types that are valid to be assigned to Event:
	//
	//	*NotifyRequest_BundleUpdated
	Event         isNotifyRequest_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyRequest) Reset() {
	*x = NotifyRequest{}
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyRequest) ProtoMessage() {}

func (x *NotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyRequest.ProtoReflect.Descriptor instead.
func (*NotifyRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP(), []int{0}
}

func (x *NotifyRequest) GetEvent() isNotifyRequest_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *NotifyRequest) GetBundleUpdated() *BundleUpdated {
	if x != nil {
		if x, ok := x.Event.(*NotifyRequest_BundleUpdated); ok {
			return x.BundleUpdated
		}
	}
	return nil
}

type isNotifyRequest_Event interface {
	isNotifyRequest_Event()
}

type NotifyRequest_BundleUpdated struct {
	// BundleUpdated is emitted whenever SPIRE Server changes the trust
	// bundle.
	BundleUpdated *BundleUpdated `protobuf:"bytes,1,opt,name=bundle_updated,json=bundleUpdated,proto3,oneof"`
}

func (*NotifyRequest_BundleUpdated) isNotifyRequest_Event() {}

type NotifyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyResponse) Reset() {
	*x = NotifyResponse{}
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyResponse) ProtoMessage() {}

func (x *NotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyResponse.ProtoReflect.Descriptor instead.
func (*NotifyResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP(), []int{1}
}

type BundleLoaded struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The bundle that was loaded.
	Bundle        *types.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BundleLoaded) Reset() {
	*x = BundleLoaded{}
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleLoaded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleLoaded) ProtoMessage() {}

func (x *BundleLoaded) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleLoaded.ProtoReflect.Descriptor instead.
func (*BundleLoaded) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP(), []int{2}
}

func (x *BundleLoaded) GetBundle() *types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type NotifyAndAdviseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The event the plugin is being notified for.
	//
	// Types that are valid to be assigned to Event:
	//
	//	*NotifyAndAdviseRequest_BundleLoaded
	Event         isNotifyAndAdviseRequest_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyAndAdviseRequest) Reset() {
	*x = NotifyAndAdviseRequest{}
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyAndAdviseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyAndAdviseRequest) ProtoMessage() {}

func (x *NotifyAndAdviseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAndAdviseRequest.ProtoReflect.Descriptor instead.
func (*NotifyAndAdviseRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP(), []int{3}
}

func (x *NotifyAndAdviseRequest) GetEvent() isNotifyAndAdviseRequest_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *NotifyAndAdviseRequest) GetBundleLoaded() *BundleLoaded {
	if x != nil {
		if x, ok := x.Event.(*NotifyAndAdviseRequest_BundleLoaded); ok {
			return x.BundleLoaded
		}
	}
	return nil
}

type isNotifyAndAdviseRequest_Event interface {
	isNotifyAndAdviseRequest_Event()
}

type NotifyAndAdviseRequest_BundleLoaded struct {
	// BundleLoaded is emitted on startup after SPIRE Server creates/loads
	// the trust bundle. If an error is returned SPIRE Server is shut down.
	BundleLoaded *BundleLoaded `protobuf:"bytes,1,opt,name=bundle_loaded,json=bundleLoaded,proto3,oneof"`
}

func (*NotifyAndAdviseRequest_BundleLoaded) isNotifyAndAdviseRequest_Event() {}

type NotifyAndAdviseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyAndAdviseResponse) Reset() {
	*x = NotifyAndAdviseResponse{}
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyAndAdviseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyAndAdviseResponse) ProtoMessage() {}

func (x *NotifyAndAdviseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAndAdviseResponse.ProtoReflect.Descriptor instead.
func (*NotifyAndAdviseResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP(), []int{4}
}

type BundleUpdated struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The bundle that was updated.
	Bundle        *types.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BundleUpdated) Reset() {
	*x = BundleUpdated{}
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleUpdated) ProtoMessage() {}

func (x *BundleUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleUpdated.ProtoReflect.Descriptor instead.
func (*BundleUpdated) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP(), []int{5}
}

func (x *BundleUpdated) GetBundle() *types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

var File_spire_plugin_server_notifier_v1_notifier_proto protoreflect.FileDescriptor

const file_spire_plugin_server_notifier_v1_notifier_proto_rawDesc = "" +
	"\n" +
	".spire/plugin/server/notifier/v1/notifier.proto\x12\x1fspire.plugin.server.notifier.v1\x1a\x1fspire/plugin/types/bundle.proto\"q\n" +
	"\rNotifyRequest\x12W\n" +
	"\x0ebundle_updated\x18\x01 \x01(\v2..spire.plugin.server.notifier.v1.BundleUpdatedH\x00R\rbundleUpdatedB\a\n" +
	"\x05event\"\x10\n" +
	"\x0eNotifyResponse\"B\n" +
	"\fBundleLoaded\x122\n" +
	"\x06bundle\x18\x01 \x01(\v2\x1a.spire.plugin.types.BundleR\x06bundle\"w\n" +
	"\x16NotifyAndAdviseRequest\x12T\n" +
	"\rbundle_loaded\x18\x01 \x01(\v2-.spire.plugin.server.notifier.v1.BundleLoadedH\x00R\fbundleLoadedB\a\n" +
	"\x05event\"\x19\n" +
	"\x17NotifyAndAdviseResponse\"C\n" +
	"\rBundleUpdated\x122\n" +
	"\x06bundle\x18\x01 \x01(\v2\x1a.spire.plugin.types.BundleR\x06bundle2\xfc\x01\n" +
	"\bNotifier\x12i\n" +
	"\x06Notify\x12..spire.plugin.server.notifier.v1.NotifyRequest\x1a/.spire.plugin.server.notifier.v1.NotifyResponse\x12\x84\x01\n" +
	"\x0fNotifyAndAdvise\x127.spire.plugin.server.notifier.v1.NotifyAndAdviseRequest\x1a8.spire.plugin.server.notifier.v1.NotifyAndAdviseResponseBUZSgithub.com/spiffe/spire-plugin-sdk/proto/spire/plugin/server/notifier/v1;notifierv1b\x06proto3"

var (
	file_spire_plugin_server_notifier_v1_notifier_proto_rawDescOnce sync.Once
	file_spire_plugin_server_notifier_v1_notifier_proto_rawDescData []byte
)

func file_spire_plugin_server_notifier_v1_notifier_proto_rawDescGZIP() []byte {
	file_spire_plugin_server_notifier_v1_notifier_proto_rawDescOnce.Do(func() {
		file_spire_plugin_server_notifier_v1_notifier_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_plugin_server_notifier_v1_notifier_proto_rawDesc), len(file_spire_plugin_server_notifier_v1_notifier_proto_rawDesc)))
	})
	return file_spire_plugin_server_notifier_v1_notifier_proto_rawDescData
}

var file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_spire_plugin_server_notifier_v1_notifier_proto_goTypes = []any{
	(*NotifyRequest)(nil),           // 0: spire.plugin.server.notifier.v1.NotifyRequest
	(*NotifyResponse)(nil),          // 1: spire.plugin.server.notifier.v1.NotifyResponse
	(*BundleLoaded)(nil),            // 2: spire.plugin.server.notifier.v1.BundleLoaded
	(*NotifyAndAdviseRequest)(nil),  // 3: spire.plugin.server.notifier.v1.NotifyAndAdviseRequest
	(*NotifyAndAdviseResponse)(nil), // 4: spire.plugin.server.notifier.v1.NotifyAndAdviseResponse
	(*BundleUpdated)(nil),           // 5: spire.plugin.server.notifier.v1.BundleUpdated
	(*types.Bundle)(nil),            // 6: spire.plugin.types.Bundle
}
var file_spire_plugin_server_notifier_v1_notifier_proto_depIdxs = []int32{
	5, // 0: spire.plugin.server.notifier.v1.NotifyRequest.bundle_updated:type_name -> spire.plugin.server.notifier.v1.BundleUpdated
	6, // 1: spire.plugin.server.notifier.v1.BundleLoaded.bundle:type_name -> spire.plugin.types.Bundle
	2, // 2: spire.plugin.server.notifier.v1.NotifyAndAdviseRequest.bundle_loaded:type_name -> spire.plugin.server.notifier.v1.BundleLoaded
	6, // 3: spire.plugin.server.notifier.v1.BundleUpdated.bundle:type_name -> spire.plugin.types.Bundle
	0, // 4: spire.plugin.server.notifier.v1.Notifier.Notify:input_type -> spire.plugin.server.notifier.v1.NotifyRequest
	3, // 5: spire.plugin.server.notifier.v1.Notifier.NotifyAndAdvise:input_type -> spire.plugin.server.notifier.v1.NotifyAndAdviseRequest
	1, // 6: spire.plugin.server.notifier.v1.Notifier.Notify:output_type -> spire.plugin.server.notifier.v1.NotifyResponse
	4, // 7: spire.plugin.server.notifier.v1.Notifier.NotifyAndAdvise:output_type -> spire.plugin.server.notifier.v1.NotifyAndAdviseResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_spire_plugin_server_notifier_v1_notifier_proto_init() }
func file_spire_plugin_server_notifier_v1_notifier_proto_init() {
	if File_spire_plugin_server_notifier_v1_notifier_proto != nil {
		return
	}
	file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[0].OneofWrappers = []any{
		(*NotifyRequest_BundleUpdated)(nil),
	}
	file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes[3].OneofWrappers = []any{
		(*NotifyAndAdviseRequest_BundleLoaded)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_plugin_server_notifier_v1_notifier_proto_rawDesc), len(file_spire_plugin_server_notifier_v1_notifier_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_plugin_server_notifier_v1_notifier_proto_goTypes,
		DependencyIndexes: file_spire_plugin_server_notifier_v1_notifier_proto_depIdxs,
		MessageInfos:      file_spire_plugin_server_notifier_v1_notifier_proto_msgTypes,
	}.Build()
	File_spire_plugin_server_notifier_v1_notifier_proto = out.File
	file_spire_plugin_server_notifier_v1_notifier_proto_goTypes = nil
	file_spire_plugin_server_notifier_v1_notifier_proto_depIdxs = nil
}
