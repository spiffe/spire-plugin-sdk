// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: spire/plugin/server/nodeattestor/v1/nodeattestor.proto

package nodeattestorv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*AttestRequest_Payload
	//	*AttestRequest_ChallengeResponse
	Request       isAttestRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttestRequest) Reset() {
	*x = AttestRequest{}
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestRequest) ProtoMessage() {}

func (x *AttestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestRequest.ProtoReflect.Descriptor instead.
func (*AttestRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{0}
}

func (x *AttestRequest) GetRequest() isAttestRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AttestRequest) GetPayload() []byte {
	if x != nil {
		if x, ok := x.Request.(*AttestRequest_Payload); ok {
			return x.Payload
		}
	}
	return nil
}

func (x *AttestRequest) GetChallengeResponse() []byte {
	if x != nil {
		if x, ok := x.Request.(*AttestRequest_ChallengeResponse); ok {
			return x.ChallengeResponse
		}
	}
	return nil
}

type isAttestRequest_Request interface {
	isAttestRequest_Request()
}

type AttestRequest_Payload struct {
	// Required in the first request. The attestation payload. See the
	// Attest RPC for details.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3,oneof"`
}

type AttestRequest_ChallengeResponse struct {
	// Required in subsequent requests. The response to a plugin issued
	// challenge. See the Attest RPC for details.
	ChallengeResponse []byte `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

func (*AttestRequest_Payload) isAttestRequest_Request() {}

func (*AttestRequest_ChallengeResponse) isAttestRequest_Request() {}

type AttestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AttestResponse_Challenge
	//	*AttestResponse_AgentAttributes
	Response      isAttestResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttestResponse) Reset() {
	*x = AttestResponse{}
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestResponse) ProtoMessage() {}

func (x *AttestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestResponse.ProtoReflect.Descriptor instead.
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{1}
}

func (x *AttestResponse) GetResponse() isAttestResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AttestResponse) GetChallenge() []byte {
	if x != nil {
		if x, ok := x.Response.(*AttestResponse_Challenge); ok {
			return x.Challenge
		}
	}
	return nil
}

func (x *AttestResponse) GetAgentAttributes() *AgentAttributes {
	if x != nil {
		if x, ok := x.Response.(*AttestResponse_AgentAttributes); ok {
			return x.AgentAttributes
		}
	}
	return nil
}

type isAttestResponse_Response interface {
	isAttestResponse_Response()
}

type AttestResponse_Challenge struct {
	// Required in all but the last response. The challenge to issue the
	// agent. See the Attest RPC for details.
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type AttestResponse_AgentAttributes struct {
	// Required as the last response. The agent attributes resulting from
	// the attestation. See the Attest RPC for details.
	AgentAttributes *AgentAttributes `protobuf:"bytes,2,opt,name=agent_attributes,json=agentAttributes,proto3,oneof"`
}

func (*AttestResponse_Challenge) isAttestResponse_Response() {}

func (*AttestResponse_AgentAttributes) isAttestResponse_Response() {}

type AgentAttributes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID to assign to the agent. Each agent in SPIRE must have a unique ID.
	// The convention for agent IDs is as follows:
	//
	// spiffe://<trust-domain>/spire/agent/<plugin-name>/<unique-suffix>
	//
	// with:
	// <trust-domain>  = the trust domain that the server belongs to
	// <plugin-name>   = the name of the plugin which attested the agent
	// <unique-suffix> = a unique suffix for this agent
	//
	// As of SPIRE 1.2.1, a warning is emitted when plugins return agent IDs
	// that do not follow the convention. Future SPIRE releases will enforce
	// the convention (see SPIRE issue #2712).
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Optional. Selectors values to ascribe to the agent. The type of the
	// selectors will be inferred from the plugin name.
	SelectorValues []string `protobuf:"bytes,2,rep,name=selector_values,json=selectorValues,proto3" json:"selector_values,omitempty"`
	// Optional. If can_reattest is true, then this attestation method
	// allows an agent to attest multiple times with the same
	// attestation payload without operator intervention.
	// This also allows the server to clear out old entries automatically
	// since they can be easily recreated.
	CanReattest   bool `protobuf:"varint,3,opt,name=can_reattest,json=canReattest,proto3" json:"can_reattest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentAttributes) Reset() {
	*x = AgentAttributes{}
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAttributes) ProtoMessage() {}

func (x *AgentAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAttributes.ProtoReflect.Descriptor instead.
func (*AgentAttributes) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{2}
}

func (x *AgentAttributes) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *AgentAttributes) GetSelectorValues() []string {
	if x != nil {
		return x.SelectorValues
	}
	return nil
}

func (x *AgentAttributes) GetCanReattest() bool {
	if x != nil {
		return x.CanReattest
	}
	return false
}

var File_spire_plugin_server_nodeattestor_v1_nodeattestor_proto protoreflect.FileDescriptor

const file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc = "" +
	"\n" +
	"6spire/plugin/server/nodeattestor/v1/nodeattestor.proto\x12#spire.plugin.server.nodeattestor.v1\"g\n" +
	"\rAttestRequest\x12\x1a\n" +
	"\apayload\x18\x01 \x01(\fH\x00R\apayload\x12/\n" +
	"\x12challenge_response\x18\x02 \x01(\fH\x00R\x11challengeResponseB\t\n" +
	"\arequest\"\x9f\x01\n" +
	"\x0eAttestResponse\x12\x1e\n" +
	"\tchallenge\x18\x01 \x01(\fH\x00R\tchallenge\x12a\n" +
	"\x10agent_attributes\x18\x02 \x01(\v24.spire.plugin.server.nodeattestor.v1.AgentAttributesH\x00R\x0fagentAttributesB\n" +
	"\n" +
	"\bresponse\"z\n" +
	"\x0fAgentAttributes\x12\x1b\n" +
	"\tspiffe_id\x18\x01 \x01(\tR\bspiffeId\x12'\n" +
	"\x0fselector_values\x18\x02 \x03(\tR\x0eselectorValues\x12!\n" +
	"\fcan_reattest\x18\x03 \x01(\bR\vcanReattest2\x85\x01\n" +
	"\fNodeAttestor\x12u\n" +
	"\x06Attest\x122.spire.plugin.server.nodeattestor.v1.AttestRequest\x1a3.spire.plugin.server.nodeattestor.v1.AttestResponse(\x010\x01B]Z[github.com/spiffe/spire-plugin-sdk/proto/spire/plugin/server/nodeattestor/v1;nodeattestorv1b\x06proto3"

var (
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescOnce sync.Once
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData []byte
)

func file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP() []byte {
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescOnce.Do(func() {
		file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc), len(file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc)))
	})
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData
}

var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_goTypes = []any{
	(*AttestRequest)(nil),   // 0: spire.plugin.server.nodeattestor.v1.AttestRequest
	(*AttestResponse)(nil),  // 1: spire.plugin.server.nodeattestor.v1.AttestResponse
	(*AgentAttributes)(nil), // 2: spire.plugin.server.nodeattestor.v1.AgentAttributes
}
var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_depIdxs = []int32{
	2, // 0: spire.plugin.server.nodeattestor.v1.AttestResponse.agent_attributes:type_name -> spire.plugin.server.nodeattestor.v1.AgentAttributes
	0, // 1: spire.plugin.server.nodeattestor.v1.NodeAttestor.Attest:input_type -> spire.plugin.server.nodeattestor.v1.AttestRequest
	1, // 2: spire.plugin.server.nodeattestor.v1.NodeAttestor.Attest:output_type -> spire.plugin.server.nodeattestor.v1.AttestResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_init() }
func file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_init() {
	if File_spire_plugin_server_nodeattestor_v1_nodeattestor_proto != nil {
		return
	}
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0].OneofWrappers = []any{
		(*AttestRequest_Payload)(nil),
		(*AttestRequest_ChallengeResponse)(nil),
	}
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1].OneofWrappers = []any{
		(*AttestResponse_Challenge)(nil),
		(*AttestResponse_AgentAttributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc), len(file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_goTypes,
		DependencyIndexes: file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_depIdxs,
		MessageInfos:      file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes,
	}.Build()
	File_spire_plugin_server_nodeattestor_v1_nodeattestor_proto = out.File
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_goTypes = nil
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_depIdxs = nil
}
