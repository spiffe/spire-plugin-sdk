// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: spire/plugin/server/nodeattestor/v1/nodeattestor.proto

package nodeattestorv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*AttestRequest_Payload
	//	*AttestRequest_ChallengeResponse
	Request isAttestRequest_Request `protobuf_oneof:"request"`
}

func (x *AttestRequest) Reset() {
	*x = AttestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestRequest) ProtoMessage() {}

func (x *AttestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestRequest.ProtoReflect.Descriptor instead.
func (*AttestRequest) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{0}
}

func (m *AttestRequest) GetRequest() isAttestRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *AttestRequest) GetPayload() []byte {
	if x, ok := x.GetRequest().(*AttestRequest_Payload); ok {
		return x.Payload
	}
	return nil
}

func (x *AttestRequest) GetChallengeResponse() []byte {
	if x, ok := x.GetRequest().(*AttestRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}

type isAttestRequest_Request interface {
	isAttestRequest_Request()
}

type AttestRequest_Payload struct {
	// Required in the first request. The attestation payload. See the
	// Attest RPC for details.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3,oneof"`
}

type AttestRequest_ChallengeResponse struct {
	// Required in subsequent requests. The response to a plugin issued
	// challenge. See the Attest RPC for details.
	ChallengeResponse []byte `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

func (*AttestRequest_Payload) isAttestRequest_Request() {}

func (*AttestRequest_ChallengeResponse) isAttestRequest_Request() {}

type AttestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*AttestResponse_Challenge
	//	*AttestResponse_AgentAttributes
	Response isAttestResponse_Response `protobuf_oneof:"response"`
}

func (x *AttestResponse) Reset() {
	*x = AttestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestResponse) ProtoMessage() {}

func (x *AttestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestResponse.ProtoReflect.Descriptor instead.
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{1}
}

func (m *AttestResponse) GetResponse() isAttestResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AttestResponse) GetChallenge() []byte {
	if x, ok := x.GetResponse().(*AttestResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (x *AttestResponse) GetAgentAttributes() *AgentAttributes {
	if x, ok := x.GetResponse().(*AttestResponse_AgentAttributes); ok {
		return x.AgentAttributes
	}
	return nil
}

type isAttestResponse_Response interface {
	isAttestResponse_Response()
}

type AttestResponse_Challenge struct {
	// Required in all but the last response. The challenge to issue the
	// agent. See the Attest RPC for details.
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type AttestResponse_AgentAttributes struct {
	// Required as the last response. The agent attributes resulting from
	// the attestation. See the Attest RPC for details.
	AgentAttributes *AgentAttributes `protobuf:"bytes,2,opt,name=agent_attributes,json=agentAttributes,proto3,oneof"`
}

func (*AttestResponse_Challenge) isAttestResponse_Response() {}

func (*AttestResponse_AgentAttributes) isAttestResponse_Response() {}

type AgentAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to assign to the agent. Each agent in SPIRE must have a unique ID.
	// The convention for agent IDs is as follows:
	//
	// spiffe://<trust-domain>/spire/agent/<plugin-name>/<unique-suffix>
	//
	// with:
	// <trust-domain>  = the trust domain that the server belongs to
	// <plugin-name>   = the name of the plugin which attested the agent
	// <unique-suffix> = a unique suffix for this agent
	//
	// As of SPIRE 1.2.1, a warning is emitted when plugins return agent IDs
	// that do not follow the convention. Future SPIRE releases will enforce
	// the convention (see SPIRE issue #2712).
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Optional. Selectors values to ascribe to the agent. The type of the
	// selectors will be inferred from the plugin name.
	SelectorValues []string `protobuf:"bytes,2,rep,name=selector_values,json=selectorValues,proto3" json:"selector_values,omitempty"`
	// Optional. If can_reattest is true, then this attestation method
	// allows an agent to attest multiple times with the same
	// attestation payload without operator intervention.
	// This also allows the server to clear out old entries automatically
	// since they can be easily recreated.
	CanReattest bool `protobuf:"varint,3,opt,name=can_reattest,json=canReattest,proto3" json:"can_reattest,omitempty"`
}

func (x *AgentAttributes) Reset() {
	*x = AgentAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAttributes) ProtoMessage() {}

func (x *AgentAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAttributes.ProtoReflect.Descriptor instead.
func (*AgentAttributes) Descriptor() ([]byte, []int) {
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{2}
}

func (x *AgentAttributes) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *AgentAttributes) GetSelectorValues() []string {
	if x != nil {
		return x.SelectorValues
	}
	return nil
}

func (x *AgentAttributes) GetCanReattest() bool {
	if x != nil {
		return x.CanReattest
	}
	return false
}

var File_spire_plugin_server_nodeattestor_v1_nodeattestor_proto protoreflect.FileDescriptor

var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc = []byte{
	0x0a, 0x36, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x67, 0x0a,
	0x0d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x32, 0x85, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x5d, 0x5a, 0x5b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x6f, 0x64,
	0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescOnce sync.Once
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData = file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc
)

func file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescGZIP() []byte {
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescOnce.Do(func() {
		file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData)
	})
	return file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDescData
}

var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_goTypes = []interface{}{
	(*AttestRequest)(nil),   // 0: spire.plugin.server.nodeattestor.v1.AttestRequest
	(*AttestResponse)(nil),  // 1: spire.plugin.server.nodeattestor.v1.AttestResponse
	(*AgentAttributes)(nil), // 2: spire.plugin.server.nodeattestor.v1.AgentAttributes
}
var file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_depIdxs = []int32{
	2, // 0: spire.plugin.server.nodeattestor.v1.AttestResponse.agent_attributes:type_name -> spire.plugin.server.nodeattestor.v1.AgentAttributes
	0, // 1: spire.plugin.server.nodeattestor.v1.NodeAttestor.Attest:input_type -> spire.plugin.server.nodeattestor.v1.AttestRequest
	1, // 2: spire.plugin.server.nodeattestor.v1.NodeAttestor.Attest:output_type -> spire.plugin.server.nodeattestor.v1.AttestResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_init() }
func file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_init() {
	if File_spire_plugin_server_nodeattestor_v1_nodeattestor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AttestRequest_Payload)(nil),
		(*AttestRequest_ChallengeResponse)(nil),
	}
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AttestResponse_Challenge)(nil),
		(*AttestResponse_AgentAttributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_goTypes,
		DependencyIndexes: file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_depIdxs,
		MessageInfos:      file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_msgTypes,
	}.Build()
	File_spire_plugin_server_nodeattestor_v1_nodeattestor_proto = out.File
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_rawDesc = nil
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_goTypes = nil
	file_spire_plugin_server_nodeattestor_v1_nodeattestor_proto_depIdxs = nil
}
