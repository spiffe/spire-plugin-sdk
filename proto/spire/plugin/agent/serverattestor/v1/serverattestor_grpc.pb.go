// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sviserverattestorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerAttestorClient is the client API for ServerAttestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerAttestorClient interface {
	// Get an up to date Trust Bundle for the initial contact with the server
	GetTrustBundle(ctx context.Context, in *GetTrustBundleRequest, opts ...grpc.CallOption) (*GetTrustBundleResponse, error)
}

type serverAttestorClient struct {
	cc grpc.ClientConnInterface
}

func NewServerAttestorClient(cc grpc.ClientConnInterface) ServerAttestorClient {
	return &serverAttestorClient{cc}
}

func (c *serverAttestorClient) GetTrustBundle(ctx context.Context, in *GetTrustBundleRequest, opts ...grpc.CallOption) (*GetTrustBundleResponse, error) {
	out := new(GetTrustBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.plugin.agent.serverattestor.v1.ServerAttestor/GetTrustBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAttestorServer is the server API for ServerAttestor service.
// All implementations must embed UnimplementedServerAttestorServer
// for forward compatibility
type ServerAttestorServer interface {
	// Get an up to date Trust Bundle for the initial contact with the server
	GetTrustBundle(context.Context, *GetTrustBundleRequest) (*GetTrustBundleResponse, error)
	mustEmbedUnimplementedServerAttestorServer()
}

// UnimplementedServerAttestorServer must be embedded to have forward compatible implementations.
type UnimplementedServerAttestorServer struct {
}

func (UnimplementedServerAttestorServer) GetTrustBundle(context.Context, *GetTrustBundleRequest) (*GetTrustBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustBundle not implemented")
}
func (UnimplementedServerAttestorServer) mustEmbedUnimplementedServerAttestorServer() {}

// UnsafeServerAttestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerAttestorServer will
// result in compilation errors.
type UnsafeServerAttestorServer interface {
	mustEmbedUnimplementedServerAttestorServer()
}

func RegisterServerAttestorServer(s grpc.ServiceRegistrar, srv ServerAttestorServer) {
	s.RegisterService(&ServerAttestor_ServiceDesc, srv)
}

func _ServerAttestor_GetTrustBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAttestorServer).GetTrustBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.plugin.agent.serverattestor.v1.ServerAttestor/GetTrustBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAttestorServer).GetTrustBundle(ctx, req.(*GetTrustBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerAttestor_ServiceDesc is the grpc.ServiceDesc for ServerAttestor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerAttestor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.plugin.agent.serverattestor.v1.ServerAttestor",
	HandlerType: (*ServerAttestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrustBundle",
			Handler:    _ServerAttestor_GetTrustBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/plugin/agent/serverattestor/v1/serverattestor.proto",
}
