// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: spire/plugin/agent/nodeattestor/v1/nodeattestor.proto

package nodeattestorv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Challenge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The challenge issued by SPIRE Server. See the AidAttestation
	// RPC for details.
	Challenge     []byte `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	mi := &file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{0}
}

func (x *Challenge) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type PayloadOrChallengeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*PayloadOrChallengeResponse_Payload
	//	*PayloadOrChallengeResponse_ChallengeResponse
	Data          isPayloadOrChallengeResponse_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayloadOrChallengeResponse) Reset() {
	*x = PayloadOrChallengeResponse{}
	mi := &file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadOrChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadOrChallengeResponse) ProtoMessage() {}

func (x *PayloadOrChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadOrChallengeResponse.ProtoReflect.Descriptor instead.
func (*PayloadOrChallengeResponse) Descriptor() ([]byte, []int) {
	return file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescGZIP(), []int{1}
}

func (x *PayloadOrChallengeResponse) GetData() isPayloadOrChallengeResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PayloadOrChallengeResponse) GetPayload() []byte {
	if x != nil {
		if x, ok := x.Data.(*PayloadOrChallengeResponse_Payload); ok {
			return x.Payload
		}
	}
	return nil
}

func (x *PayloadOrChallengeResponse) GetChallengeResponse() []byte {
	if x != nil {
		if x, ok := x.Data.(*PayloadOrChallengeResponse_ChallengeResponse); ok {
			return x.ChallengeResponse
		}
	}
	return nil
}

type isPayloadOrChallengeResponse_Data interface {
	isPayloadOrChallengeResponse_Data()
}

type PayloadOrChallengeResponse_Payload struct {
	// Required in the first response. This is the attestation payload that
	// is to be sent to SPIRE Server. See the AidAttestation RPC for
	// details.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3,oneof"`
}

type PayloadOrChallengeResponse_ChallengeResponse struct {
	// Required in subsequent responses. The challenge response to a
	// challenge issued by SPIRE Server. See the AidAttestation RPC for
	// details.
	ChallengeResponse []byte `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

func (*PayloadOrChallengeResponse_Payload) isPayloadOrChallengeResponse_Data() {}

func (*PayloadOrChallengeResponse_ChallengeResponse) isPayloadOrChallengeResponse_Data() {}

var File_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto protoreflect.FileDescriptor

const file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDesc = "" +
	"\n" +
	"5spire/plugin/agent/nodeattestor/v1/nodeattestor.proto\x12\"spire.plugin.agent.nodeattestor.v1\")\n" +
	"\tChallenge\x12\x1c\n" +
	"\tchallenge\x18\x01 \x01(\fR\tchallenge\"q\n" +
	"\x1aPayloadOrChallengeResponse\x12\x1a\n" +
	"\apayload\x18\x01 \x01(\fH\x00R\apayload\x12/\n" +
	"\x12challenge_response\x18\x02 \x01(\fH\x00R\x11challengeResponseB\x06\n" +
	"\x04data2\x94\x01\n" +
	"\fNodeAttestor\x12\x83\x01\n" +
	"\x0eAidAttestation\x12-.spire.plugin.agent.nodeattestor.v1.Challenge\x1a>.spire.plugin.agent.nodeattestor.v1.PayloadOrChallengeResponse(\x010\x01B\\ZZgithub.com/spiffe/spire-plugin-sdk/proto/spire/plugin/agent/nodeattestor/v1;nodeattestorv1b\x06proto3"

var (
	file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescOnce sync.Once
	file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescData []byte
)

func file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescGZIP() []byte {
	file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescOnce.Do(func() {
		file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDesc), len(file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDesc)))
	})
	return file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDescData
}

var file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_goTypes = []any{
	(*Challenge)(nil),                  // 0: spire.plugin.agent.nodeattestor.v1.Challenge
	(*PayloadOrChallengeResponse)(nil), // 1: spire.plugin.agent.nodeattestor.v1.PayloadOrChallengeResponse
}
var file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_depIdxs = []int32{
	0, // 0: spire.plugin.agent.nodeattestor.v1.NodeAttestor.AidAttestation:input_type -> spire.plugin.agent.nodeattestor.v1.Challenge
	1, // 1: spire.plugin.agent.nodeattestor.v1.NodeAttestor.AidAttestation:output_type -> spire.plugin.agent.nodeattestor.v1.PayloadOrChallengeResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_init() }
func file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_init() {
	if File_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto != nil {
		return
	}
	file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes[1].OneofWrappers = []any{
		(*PayloadOrChallengeResponse_Payload)(nil),
		(*PayloadOrChallengeResponse_ChallengeResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDesc), len(file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_goTypes,
		DependencyIndexes: file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_depIdxs,
		MessageInfos:      file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_msgTypes,
	}.Build()
	File_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto = out.File
	file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_goTypes = nil
	file_spire_plugin_agent_nodeattestor_v1_nodeattestor_proto_depIdxs = nil
}
