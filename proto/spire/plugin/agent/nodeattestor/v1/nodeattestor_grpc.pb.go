// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: spire/plugin/agent/nodeattestor/v1/nodeattestor.proto

package nodeattestorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeAttestor_AidAttestation_FullMethodName = "/spire.plugin.agent.nodeattestor.v1.NodeAttestor/AidAttestation"
)

// NodeAttestorClient is the client API for NodeAttestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAttestorClient interface {
	// AidAttestation facilitates attestation by returning the attestation
	// payload and participating in attestation challenge/response.
	//
	// The attestation flow is as follows:
	//  1. SPIRE Agent opens up a stream to the plugin via FetchAttestationData.
	//  2. The plugin returns a response with the payload.
	//  3. SPIRE Agent sends the payload to SPIRE Server.
	//  4. Optionally, SPIRE Server responds with a challenge:
	//     4a. SPIRE Agent sends the challenge to the plugin.
	//     4b. The plugin responds with the challenge response.
	//     4c. SPIRE Agent sends the challenge response to SPIRE Server.
	//     4d. Step 4 is repeated until SPIRE Server is satisfied and does not
	//     respond with an additional challenge.
	//  5. SPIRE Agent closes the stream.
	//
	// Note that SPIRE Agent does NOT send a request down the stream unless it
	// needs to issue the challenge returned by SPIRE Server (step 4a).
	//
	// Plugins that do not need challenge/response as part of the attestation
	// process may close the stream as soon as they send the attestation
	// payload (step 2).
	AidAttestation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Challenge, PayloadOrChallengeResponse], error)
}

type nodeAttestorClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAttestorClient(cc grpc.ClientConnInterface) NodeAttestorClient {
	return &nodeAttestorClient{cc}
}

func (c *nodeAttestorClient) AidAttestation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Challenge, PayloadOrChallengeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeAttestor_ServiceDesc.Streams[0], NodeAttestor_AidAttestation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Challenge, PayloadOrChallengeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeAttestor_AidAttestationClient = grpc.BidiStreamingClient[Challenge, PayloadOrChallengeResponse]

// NodeAttestorServer is the server API for NodeAttestor service.
// All implementations must embed UnimplementedNodeAttestorServer
// for forward compatibility.
type NodeAttestorServer interface {
	// AidAttestation facilitates attestation by returning the attestation
	// payload and participating in attestation challenge/response.
	//
	// The attestation flow is as follows:
	//  1. SPIRE Agent opens up a stream to the plugin via FetchAttestationData.
	//  2. The plugin returns a response with the payload.
	//  3. SPIRE Agent sends the payload to SPIRE Server.
	//  4. Optionally, SPIRE Server responds with a challenge:
	//     4a. SPIRE Agent sends the challenge to the plugin.
	//     4b. The plugin responds with the challenge response.
	//     4c. SPIRE Agent sends the challenge response to SPIRE Server.
	//     4d. Step 4 is repeated until SPIRE Server is satisfied and does not
	//     respond with an additional challenge.
	//  5. SPIRE Agent closes the stream.
	//
	// Note that SPIRE Agent does NOT send a request down the stream unless it
	// needs to issue the challenge returned by SPIRE Server (step 4a).
	//
	// Plugins that do not need challenge/response as part of the attestation
	// process may close the stream as soon as they send the attestation
	// payload (step 2).
	AidAttestation(grpc.BidiStreamingServer[Challenge, PayloadOrChallengeResponse]) error
	mustEmbedUnimplementedNodeAttestorServer()
}

// UnimplementedNodeAttestorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeAttestorServer struct{}

func (UnimplementedNodeAttestorServer) AidAttestation(grpc.BidiStreamingServer[Challenge, PayloadOrChallengeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AidAttestation not implemented")
}
func (UnimplementedNodeAttestorServer) mustEmbedUnimplementedNodeAttestorServer() {}
func (UnimplementedNodeAttestorServer) testEmbeddedByValue()                      {}

// UnsafeNodeAttestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAttestorServer will
// result in compilation errors.
type UnsafeNodeAttestorServer interface {
	mustEmbedUnimplementedNodeAttestorServer()
}

func RegisterNodeAttestorServer(s grpc.ServiceRegistrar, srv NodeAttestorServer) {
	// If the following call pancis, it indicates UnimplementedNodeAttestorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeAttestor_ServiceDesc, srv)
}

func _NodeAttestor_AidAttestation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeAttestorServer).AidAttestation(&grpc.GenericServerStream[Challenge, PayloadOrChallengeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeAttestor_AidAttestationServer = grpc.BidiStreamingServer[Challenge, PayloadOrChallengeResponse]

// NodeAttestor_ServiceDesc is the grpc.ServiceDesc for NodeAttestor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAttestor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.plugin.agent.nodeattestor.v1.NodeAttestor",
	HandlerType: (*NodeAttestorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AidAttestation",
			Handler:       _NodeAttestor_AidAttestation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spire/plugin/agent/nodeattestor/v1/nodeattestor.proto",
}
