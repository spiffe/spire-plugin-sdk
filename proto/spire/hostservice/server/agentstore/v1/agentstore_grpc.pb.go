// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: spire/hostservice/server/agentstore/v1/agentstore.proto

package agentstorev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentStore_GetAgentInfo_FullMethodName = "/spire.hostservice.server.agentstore.v1.AgentStore/GetAgentInfo"
)

// AgentStoreClient is the client API for AgentStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentStoreClient interface {
	// Gets the information associated with the given agent ID. If the given
	// agent is not attested, NOT_FOUND is returned. This RPC is currently
	// only used by server-side NodeAttestor plugins look up existing
	// agents to enforce TOFU.
	GetAgentInfo(ctx context.Context, in *GetAgentInfoRequest, opts ...grpc.CallOption) (*GetAgentInfoResponse, error)
}

type agentStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentStoreClient(cc grpc.ClientConnInterface) AgentStoreClient {
	return &agentStoreClient{cc}
}

func (c *agentStoreClient) GetAgentInfo(ctx context.Context, in *GetAgentInfoRequest, opts ...grpc.CallOption) (*GetAgentInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentInfoResponse)
	err := c.cc.Invoke(ctx, AgentStore_GetAgentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentStoreServer is the server API for AgentStore service.
// All implementations must embed UnimplementedAgentStoreServer
// for forward compatibility.
type AgentStoreServer interface {
	// Gets the information associated with the given agent ID. If the given
	// agent is not attested, NOT_FOUND is returned. This RPC is currently
	// only used by server-side NodeAttestor plugins look up existing
	// agents to enforce TOFU.
	GetAgentInfo(context.Context, *GetAgentInfoRequest) (*GetAgentInfoResponse, error)
	mustEmbedUnimplementedAgentStoreServer()
}

// UnimplementedAgentStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentStoreServer struct{}

func (UnimplementedAgentStoreServer) GetAgentInfo(context.Context, *GetAgentInfoRequest) (*GetAgentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInfo not implemented")
}
func (UnimplementedAgentStoreServer) mustEmbedUnimplementedAgentStoreServer() {}
func (UnimplementedAgentStoreServer) testEmbeddedByValue()                    {}

// UnsafeAgentStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentStoreServer will
// result in compilation errors.
type UnsafeAgentStoreServer interface {
	mustEmbedUnimplementedAgentStoreServer()
}

func RegisterAgentStoreServer(s grpc.ServiceRegistrar, srv AgentStoreServer) {
	// If the following call pancis, it indicates UnimplementedAgentStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentStore_ServiceDesc, srv)
}

func _AgentStore_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentStoreServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentStore_GetAgentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentStoreServer).GetAgentInfo(ctx, req.(*GetAgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentStore_ServiceDesc is the grpc.ServiceDesc for AgentStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.hostservice.server.agentstore.v1.AgentStore",
	HandlerType: (*AgentStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentInfo",
			Handler:    _AgentStore_GetAgentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/hostservice/server/agentstore/v1/agentstore.proto",
}
