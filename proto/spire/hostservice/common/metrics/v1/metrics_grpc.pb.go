// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: spire/hostservice/common/metrics/v1/metrics.proto

package metricsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Metrics_SetGauge_FullMethodName     = "/spire.hostservice.common.metrics.v1.Metrics/SetGauge"
	Metrics_EmitKey_FullMethodName      = "/spire.hostservice.common.metrics.v1.Metrics/EmitKey"
	Metrics_IncrCounter_FullMethodName  = "/spire.hostservice.common.metrics.v1.Metrics/IncrCounter"
	Metrics_AddSample_FullMethodName    = "/spire.hostservice.common.metrics.v1.Metrics/AddSample"
	Metrics_MeasureSince_FullMethodName = "/spire.hostservice.common.metrics.v1.Metrics/MeasureSince"
)

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	// Sets a gauge to the specified value with zero or more labels.
	SetGauge(ctx context.Context, in *SetGaugeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Emits a key/value pair.
	EmitKey(ctx context.Context, in *EmitKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Increments a counter by the given value with zero or more labels. The
	// value should be an accumulation of previous values and should only grow.
	IncrCounter(ctx context.Context, in *IncrCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Adds a sample of the given value with zero or more labels.
	AddSample(ctx context.Context, in *AddSampleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Adds a sample for the elapsed time since the given
	// timestamp with zero or more labels.
	MeasureSince(ctx context.Context, in *MeasureSinceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) SetGauge(ctx context.Context, in *SetGaugeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Metrics_SetGauge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) EmitKey(ctx context.Context, in *EmitKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Metrics_EmitKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) IncrCounter(ctx context.Context, in *IncrCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Metrics_IncrCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) AddSample(ctx context.Context, in *AddSampleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Metrics_AddSample_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) MeasureSince(ctx context.Context, in *MeasureSinceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Metrics_MeasureSince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility.
type MetricsServer interface {
	// Sets a gauge to the specified value with zero or more labels.
	SetGauge(context.Context, *SetGaugeRequest) (*emptypb.Empty, error)
	// Emits a key/value pair.
	EmitKey(context.Context, *EmitKeyRequest) (*emptypb.Empty, error)
	// Increments a counter by the given value with zero or more labels. The
	// value should be an accumulation of previous values and should only grow.
	IncrCounter(context.Context, *IncrCounterRequest) (*emptypb.Empty, error)
	// Adds a sample of the given value with zero or more labels.
	AddSample(context.Context, *AddSampleRequest) (*emptypb.Empty, error)
	// Adds a sample for the elapsed time since the given
	// timestamp with zero or more labels.
	MeasureSince(context.Context, *MeasureSinceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsServer struct{}

func (UnimplementedMetricsServer) SetGauge(context.Context, *SetGaugeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGauge not implemented")
}
func (UnimplementedMetricsServer) EmitKey(context.Context, *EmitKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitKey not implemented")
}
func (UnimplementedMetricsServer) IncrCounter(context.Context, *IncrCounterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrCounter not implemented")
}
func (UnimplementedMetricsServer) AddSample(context.Context, *AddSampleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSample not implemented")
}
func (UnimplementedMetricsServer) MeasureSince(context.Context, *MeasureSinceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeasureSince not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}
func (UnimplementedMetricsServer) testEmbeddedByValue()                 {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	// If the following call pancis, it indicates UnimplementedMetricsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_SetGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGaugeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).SetGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_SetGauge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).SetGauge(ctx, req.(*SetGaugeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_EmitKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).EmitKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_EmitKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).EmitKey(ctx, req.(*EmitKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_IncrCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).IncrCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_IncrCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).IncrCounter(ctx, req.(*IncrCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_AddSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).AddSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_AddSample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).AddSample(ctx, req.(*AddSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_MeasureSince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureSinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).MeasureSince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_MeasureSince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).MeasureSince(ctx, req.(*MeasureSinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.hostservice.common.metrics.v1.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGauge",
			Handler:    _Metrics_SetGauge_Handler,
		},
		{
			MethodName: "EmitKey",
			Handler:    _Metrics_EmitKey_Handler,
		},
		{
			MethodName: "IncrCounter",
			Handler:    _Metrics_IncrCounter_Handler,
		},
		{
			MethodName: "AddSample",
			Handler:    _Metrics_AddSample_Handler,
		},
		{
			MethodName: "MeasureSince",
			Handler:    _Metrics_MeasureSince_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/hostservice/common/metrics/v1/metrics.proto",
}
