// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: spire/hostservice/common/metrics/v1/metrics.proto

package metricsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetGaugeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The gauge key.
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	// Required. The gauge value.
	Val float32 `protobuf:"fixed32,2,opt,name=val,proto3" json:"val,omitempty"`
	// Optional. One or more labels for the gauge.
	Labels []*Label `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *SetGaugeRequest) Reset() {
	*x = SetGaugeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGaugeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGaugeRequest) ProtoMessage() {}

func (x *SetGaugeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGaugeRequest.ProtoReflect.Descriptor instead.
func (*SetGaugeRequest) Descriptor() ([]byte, []int) {
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *SetGaugeRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SetGaugeRequest) GetVal() float32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *SetGaugeRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type EmitKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The key key.
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	// Required. The key value.
	Val float32 `protobuf:"fixed32,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *EmitKeyRequest) Reset() {
	*x = EmitKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmitKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitKeyRequest) ProtoMessage() {}

func (x *EmitKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitKeyRequest.ProtoReflect.Descriptor instead.
func (*EmitKeyRequest) Descriptor() ([]byte, []int) {
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *EmitKeyRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EmitKeyRequest) GetVal() float32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type IncrCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The counter key.
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	// Required. The counter value.
	Val float32 `protobuf:"fixed32,2,opt,name=val,proto3" json:"val,omitempty"`
	// Optional. One or more labels for the counter.
	Labels []*Label `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *IncrCounterRequest) Reset() {
	*x = IncrCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrCounterRequest) ProtoMessage() {}

func (x *IncrCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrCounterRequest.ProtoReflect.Descriptor instead.
func (*IncrCounterRequest) Descriptor() ([]byte, []int) {
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *IncrCounterRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IncrCounterRequest) GetVal() float32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *IncrCounterRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type AddSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The sample key.
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	// Required. The sample value.
	Val float32 `protobuf:"fixed32,2,opt,name=val,proto3" json:"val,omitempty"`
	// Optional. One or more labels for the sample.
	Labels []*Label `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *AddSampleRequest) Reset() {
	*x = AddSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSampleRequest) ProtoMessage() {}

func (x *AddSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSampleRequest.ProtoReflect.Descriptor instead.
func (*AddSampleRequest) Descriptor() ([]byte, []int) {
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *AddSampleRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddSampleRequest) GetVal() float32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *AddSampleRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type MeasureSinceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The sample key for the time measurement.
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	// Required. Unix time in nanoseconds.
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Optional. One or more labels for the sample.
	Labels []*Label `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *MeasureSinceRequest) Reset() {
	*x = MeasureSinceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureSinceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureSinceRequest) ProtoMessage() {}

func (x *MeasureSinceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureSinceRequest.ProtoReflect.Descriptor instead.
func (*MeasureSinceRequest) Descriptor() ([]byte, []int) {
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *MeasureSinceRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MeasureSinceRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MeasureSinceRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the label.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The value of the label.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_spire_hostservice_common_metrics_v1_metrics_proto protoreflect.FileDescriptor

var file_spire_hostservice_common_metrics_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x23, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x47, 0x61, 0x75, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x34, 0x0a, 0x0e, 0x45, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x7c, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x7a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x7f, 0x0a, 0x13, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0x31, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0xd9, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x58, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x75, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x07, 0x45, 0x6d,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x37, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x35, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60,
	0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescOnce sync.Once
	file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescData = file_spire_hostservice_common_metrics_v1_metrics_proto_rawDesc
)

func file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescGZIP() []byte {
	file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescOnce.Do(func() {
		file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescData)
	})
	return file_spire_hostservice_common_metrics_v1_metrics_proto_rawDescData
}

var file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_spire_hostservice_common_metrics_v1_metrics_proto_goTypes = []interface{}{
	(*SetGaugeRequest)(nil),     // 0: spire.hostservice.common.metrics.v1.SetGaugeRequest
	(*EmitKeyRequest)(nil),      // 1: spire.hostservice.common.metrics.v1.EmitKeyRequest
	(*IncrCounterRequest)(nil),  // 2: spire.hostservice.common.metrics.v1.IncrCounterRequest
	(*AddSampleRequest)(nil),    // 3: spire.hostservice.common.metrics.v1.AddSampleRequest
	(*MeasureSinceRequest)(nil), // 4: spire.hostservice.common.metrics.v1.MeasureSinceRequest
	(*Label)(nil),               // 5: spire.hostservice.common.metrics.v1.Label
	(*emptypb.Empty)(nil),       // 6: google.protobuf.Empty
}
var file_spire_hostservice_common_metrics_v1_metrics_proto_depIdxs = []int32{
	5, // 0: spire.hostservice.common.metrics.v1.SetGaugeRequest.labels:type_name -> spire.hostservice.common.metrics.v1.Label
	5, // 1: spire.hostservice.common.metrics.v1.IncrCounterRequest.labels:type_name -> spire.hostservice.common.metrics.v1.Label
	5, // 2: spire.hostservice.common.metrics.v1.AddSampleRequest.labels:type_name -> spire.hostservice.common.metrics.v1.Label
	5, // 3: spire.hostservice.common.metrics.v1.MeasureSinceRequest.labels:type_name -> spire.hostservice.common.metrics.v1.Label
	0, // 4: spire.hostservice.common.metrics.v1.Metrics.SetGauge:input_type -> spire.hostservice.common.metrics.v1.SetGaugeRequest
	1, // 5: spire.hostservice.common.metrics.v1.Metrics.EmitKey:input_type -> spire.hostservice.common.metrics.v1.EmitKeyRequest
	2, // 6: spire.hostservice.common.metrics.v1.Metrics.IncrCounter:input_type -> spire.hostservice.common.metrics.v1.IncrCounterRequest
	3, // 7: spire.hostservice.common.metrics.v1.Metrics.AddSample:input_type -> spire.hostservice.common.metrics.v1.AddSampleRequest
	4, // 8: spire.hostservice.common.metrics.v1.Metrics.MeasureSince:input_type -> spire.hostservice.common.metrics.v1.MeasureSinceRequest
	6, // 9: spire.hostservice.common.metrics.v1.Metrics.SetGauge:output_type -> google.protobuf.Empty
	6, // 10: spire.hostservice.common.metrics.v1.Metrics.EmitKey:output_type -> google.protobuf.Empty
	6, // 11: spire.hostservice.common.metrics.v1.Metrics.IncrCounter:output_type -> google.protobuf.Empty
	6, // 12: spire.hostservice.common.metrics.v1.Metrics.AddSample:output_type -> google.protobuf.Empty
	6, // 13: spire.hostservice.common.metrics.v1.Metrics.MeasureSince:output_type -> google.protobuf.Empty
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_spire_hostservice_common_metrics_v1_metrics_proto_init() }
func file_spire_hostservice_common_metrics_v1_metrics_proto_init() {
	if File_spire_hostservice_common_metrics_v1_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGaugeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmitKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureSinceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_hostservice_common_metrics_v1_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_hostservice_common_metrics_v1_metrics_proto_goTypes,
		DependencyIndexes: file_spire_hostservice_common_metrics_v1_metrics_proto_depIdxs,
		MessageInfos:      file_spire_hostservice_common_metrics_v1_metrics_proto_msgTypes,
	}.Build()
	File_spire_hostservice_common_metrics_v1_metrics_proto = out.File
	file_spire_hostservice_common_metrics_v1_metrics_proto_rawDesc = nil
	file_spire_hostservice_common_metrics_v1_metrics_proto_goTypes = nil
	file_spire_hostservice_common_metrics_v1_metrics_proto_depIdxs = nil
}
