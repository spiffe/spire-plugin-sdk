// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: spire/service/private/init/v1/init.proto

package initv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Init_Init_FullMethodName   = "/spire.service.private.init.v1.Init/Init"
	Init_Deinit_FullMethodName = "/spire.service.private.init.v1.Init/Deinit"
)

// InitClient is the client API for Init service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Init is an internal service that the plugin framework uses to initialize
// a plugin after it has been loaded. Initialization takes place when the
// plugin client connects, since the client is responsible for hosting the
// broker that is used to provide host services. If we initialize before that,
// there would be no broker available to connect to host services with.
// The service is also used for graceful cleanup when the plugin is unloaded.
type InitClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Deinit(ctx context.Context, in *DeinitRequest, opts ...grpc.CallOption) (*DeinitResponse, error)
}

type initClient struct {
	cc grpc.ClientConnInterface
}

func NewInitClient(cc grpc.ClientConnInterface) InitClient {
	return &initClient{cc}
}

func (c *initClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Init_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initClient) Deinit(ctx context.Context, in *DeinitRequest, opts ...grpc.CallOption) (*DeinitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeinitResponse)
	err := c.cc.Invoke(ctx, Init_Deinit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitServer is the server API for Init service.
// All implementations must embed UnimplementedInitServer
// for forward compatibility.
//
// Init is an internal service that the plugin framework uses to initialize
// a plugin after it has been loaded. Initialization takes place when the
// plugin client connects, since the client is responsible for hosting the
// broker that is used to provide host services. If we initialize before that,
// there would be no broker available to connect to host services with.
// The service is also used for graceful cleanup when the plugin is unloaded.
type InitServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Deinit(context.Context, *DeinitRequest) (*DeinitResponse, error)
	mustEmbedUnimplementedInitServer()
}

// UnimplementedInitServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInitServer struct{}

func (UnimplementedInitServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedInitServer) Deinit(context.Context, *DeinitRequest) (*DeinitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deinit not implemented")
}
func (UnimplementedInitServer) mustEmbedUnimplementedInitServer() {}
func (UnimplementedInitServer) testEmbeddedByValue()              {}

// UnsafeInitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitServer will
// result in compilation errors.
type UnsafeInitServer interface {
	mustEmbedUnimplementedInitServer()
}

func RegisterInitServer(s grpc.ServiceRegistrar, srv InitServer) {
	// If the following call pancis, it indicates UnimplementedInitServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Init_ServiceDesc, srv)
}

func _Init_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Init_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Init_Deinit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeinitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).Deinit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Init_Deinit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).Deinit(ctx, req.(*DeinitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Init_ServiceDesc is the grpc.ServiceDesc for Init service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Init_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.service.private.init.v1.Init",
	HandlerType: (*InitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Init_Init_Handler,
		},
		{
			MethodName: "Deinit",
			Handler:    _Init_Deinit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/service/private/init/v1/init.proto",
}
